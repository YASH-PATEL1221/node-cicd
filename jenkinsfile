pipeline{
    agent any

    tools{
        nodejs "nodejs"
    }

    environment{
        APP_NAME="yashpatel274/temp-node"
    }

    stages{
        stage('git checkout') {
            steps{
                checkout([$class: 'GitSCM', 
                        branches: [[name: '*/master']], 
                        doGenerateSubmoduleConfigurations: false,  
                        userRemoteConfigs: [[credentialsId: 'github-ssh', url: 'git@github.com:YASH-PATEL1221/node-cicd.git']]])
            }
        }

        stage('install dependency'){
            steps{
                sh 'npm install'
            }
        }

        stage('sonar scanner'){
            steps{
                withSonarQubeEnv(installationName: 'sonarqube') {
                    sh '/root/sonar/sonar/bin/sonar-scanner \
                    -Dsonar.organization=yash-patel1221 \
                    -Dsonar.projectKey=yash-patel1221_nodejs-code-check \
                    -Dsonar.sources=. \
                    -Dsonar.host.url=https://sonarcloud.io
                    '
                }
            }
        }

        stage('docker build'){
            steps{
                    script{
                        sh "docker build -t $APP_NAME:${env.BUILD_NUMBER} ."
                    }
            }
        }
    
        stage('Scan Docker Image'){
            steps{
                script{
                    def trivyOutput = sh(script: "trivy image $APP_NAME:latest", returnStdout: true).trim()

                    println trivyOutput

                    if (trivyOutput.contains("Total: 0")) {
                        echo "No vulnerabilities found in the Docker image."
                    }
                    else if(trivyOutput.contains("Total: 1")){
                        unstable('1 vulnerabilities found in the Docker image.');
                    }
                    else if(trivyOutput.contains("Total: 2")){
                        unstable('2 vulnerabilities found in the Docker image.');
                    }
                    else {
                        error "Vulnerabilities found in the Docker image."
                        return;
                    }
                }
            }
        }

        stage("Push to docker hub"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-login', toolName: 'docker') {
                        sh "docker push yashpatel274/temp-node:${env.BUILD_NUMBER}"
                    }
                }
            }
        }

    }
}